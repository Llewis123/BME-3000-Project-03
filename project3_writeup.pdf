"""

Writeup Writeup Writeup Writeup Writeup Writeupv

ANS Evaluation module
By Bila Bogre & Lincoln Lewis
@Llewis123 (github) & @B11LA (github)

This module provides novel functions for analyzing and filtering nervous system activity
This was originally designed and used to:
1. Filter ECG data
2. Automatically detect heartbeat times
3. Calculate HRV
4. Find HRV power in LF and HF frequency bands
5. Compare LF/HF ratios during periods of relaxation and stress
"""

# Part 1

For the ANS Evaluation project we had a student perform the analysis by placing the ECG sparkfun sensor on the areas that were 
shown in an example we found that they should all be placed. The four activities that were chosen were all based on the instructions 
that were given to us for comparison. The first activity had the student just sitting in their seat and closing their eyes for five 
minutes. This activity was a bit harder to capture because of the noise in the classroom and the clothing being very close to the 
sensor would interfere with capturing the data as accurately as possible. The second activity had the student sitting and listening 
to some music that helped with meditation which was for the relaxing activity that is not at rest. The third activity was performed 
by sitting and doing a quite difficult puzzle. The fourth activity was the physically stressful activity and the student bounced a 
yoga ball for five minutes. These activities were all chosen by the student as they were the easiest way to record data for the amount 
of time left in class. The activities were mentioned because in the code of this project we defined the activities as the number 
according to the order given in the instructions. The functions we used in this were load_data and load_x. Load_data can load recorded 
data of the different activities and can load them as 3 different types of data, which could be in, .txt, .npz, or .csv files. 
The load_x function chooses whether to load the data in the domain it's already in and also has an option to plot these sets or not.

# Part 2

We decided to write a wrapper function called filter_data that would apply the notch_filter and butterworth_filter filters. 
We defined the notch and butterworth filter functions within the wrapper function. These filters are necessary because they remove 
undesirable noises or artifacts that could obstruct data recording. The flexibility comes from the fact that these filters can only be 
run by calling certain functions.

# Part 3

#Include a plot to show places where it works well and places where it has room 

We used biospy for the detection of heartbeats in our project. Biopsy uses a data filtration process employing templates, 
a method we had used to our approach in Project 2. To identify heartbeats, the algorithm assesses whether the preceding index 
is less than the subsequent one, thereby pinpointing the moment of a heartbeat.

Since we were using a Python module that was skilled at creating arguments on its 
based on the ECG data, we were able to make the code adaptable. This approach relied
on using our detect_heartbeats function, which requires fs and ecg_data as inputs. 
This application illustrates how flexible and advanced biopsy is inside our framework
of analysis.
 
# Part 4
#display your bar plot. 

We anticipate that HRV values for physically demanding and stressful activities would 
correlate with an increased heart workload which would show higherlevels. 
On the other hand, we anticipate lower HRV values for peaceful and soothing 
activities, which correlate to times when physical effort is decreased.

The HRV values that were acquired are consistent with the expectations that were set 
before the analysis was carried out in our code. We ran the calculate_HRV function, 
which was created to take in r_peaks and fs as inputs and then output the required 
analysis. This feature makes it easier to calculate the analysis using biospy, a program 
that is used in this project to process data obtained from the ECG signal.


# Part 5




# Part 6
